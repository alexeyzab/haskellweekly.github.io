<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Haskell Weekly</title>
        <link>https://haskellweekly.news</link>
        <description><![CDATA[A weekly Haskell newsletter.]]></description>
        <atom:link href="https://haskellweekly.news/haskell-weekly.rss" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Thu, 06 Jul 2017 00:00:00 UT</lastBuildDate>
        <item>
    <title>Issue 62</title>
    <link>https://haskellweekly.news/issues/62.html</link>
    <description><![CDATA[<p>Welcome to another issue of Haskell Weekly! Haskell is a purely functional programming language that focuses on robustness, concision, and correctness. This is a weekly summary of what’s going on in its community.</p>
<h2 id="featured">Featured</h2>
<ul>
<li><p><a href="https://www.youtube.com/playlist?list=PLIpl4GKFQR6dqCNb2J0eQFR21Lwnk4I86">YOW! Lambda Jam 2017</a></p>
<p>Videos of 23 talks by Edward Kmett, John Hughes, Conal Elliott, Brian McKenna, Bodil Stokke, and others.</p></li>
<li><p><a href="https://personal.cis.strath.ac.uk/conor.mcbride/so-pigworker.pdf">Perhaps not the answer you were expecting but you asked for it</a></p>
<p>A collection of Conor McBride’s Stack Overflow answers.</p></li>
<li><p><a href="https://lexi-lambda.github.io/blog/2017/06/29/unit-testing-effectful-haskell-with-monad-mock/">Unit testing effectful Haskell with monad-mock</a></p>
<blockquote>
<p>While monad-mock might not be anything drastically different from existing testing techniques, my hope is that it can provide an opinionated mechanism to make testing easy and accessible, even for complex interactions with other services and systems.</p>
</blockquote></li>
<li><p><a href="https://frontrow.workable.com/j/463B843754">Front Row is hiring a senior backend Haskell engineer</a> (ad)</p>
<blockquote>
<p>Come change how 6.5+ million K-12 US students learn Math, Language Arts, Social Studies and more. Use data, advanced type systems, great product design and deep pedagogy to change lives.</p>
</blockquote></li>
<li><p><a href="https://markkarpov.com/post/megaparsec-more-speed-more-power.html">A major upgrade to Megaparsec: more speed, more power</a></p>
<blockquote>
<p>The version 6 thus will aim to be not just a parser for human-readable texts and source code, but “one size fits all” general solution to parsing in Haskell, including low-level binary parsing.</p>
</blockquote></li>
<li><p><a href="https://gist.github.com/Icelandjack/d258b88a0e0b3be2c0b3711fdd833045/fe806ce795006be545833742dd1bdcdc31738ca5">Derive instances of representationally equal types</a></p>
<blockquote>
<p>I made a way to get more free stuff and free stuff is good.</p>
</blockquote></li>
<li><p><a href="https://np.reddit.com/r/haskell/comments/6l85uj/announcement_new_version_of_fltkhs_with_much/">New version of FLTKHS with much better error messages and OpenGL integration</a></p>
<blockquote>
<p>Happy to announce a new major version of FLTKHS, the Haskell binding to the FLTK for easy native cross-platform GUI apps in Haskell.</p>
</blockquote></li>
<li><p><a href="http://teh.id.au/posts/2017/06/30/notes-on-fusion/index.html">Notes on fusion</a></p>
<blockquote>
<p>Fusion is one of those words that made me recoil for quite a few years, since it sounds extremely complicated and arcane. A few years into building applications in Haskell, I still hadn’t forced the thunk.</p>
</blockquote></li>
<li><p><a href="https://www.athiemann.net/2017/07/02/superrecord.html">SuperRecord: Anonymous records for Haskell</a></p>
<blockquote>
<p>A practical library for anonymous records that is both fast and has an ergonomic interface for both using and extending it.</p>
</blockquote></li>
<li><p><a href="https://rkrishnan.org/posts/2017-06-20-typesafe-modulus-in-haskell.html">Typesafe modular arithmetic in Haskell</a></p>
<blockquote>
<p>We would like to get a type error (at compile time) if we do a operation involving two numbers with a different modulus. The role of a type system is to represent the invariants and so it will be great to encode as many invariants of a particular value into the type.</p>
</blockquote></li>
<li><p><a href="https://jaseemabid.github.io/2017/07/04/compiler.html">Lessons learned building a toy compiler</a></p>
<blockquote>
<p>We tend to think of compilers as big black boxes which transform some high level language, let’s say C into a binary in one big step. I’d like to present it as a pipeline of languages and transformations, each a bit simpler and slightly lower level than the one before it.</p>
</blockquote></li>
</ul>
<h2 id="package-of-the-week">Package of the week</h2>
<p>This week’s package of the week is <a href="https://hackage.haskell.org/package/miso-0.1.2.0">Miso</a>, a small isomorphic front-end framework.</p>
<h2 id="in-brief">In brief</h2>
<ul>
<li><a href="https://metarabbit.wordpress.com/2017/06/30/ann-diskhash-disk-based-persistent-hash-tables/">Diskhash: Disk-based, persistent hash tables</a></li>
<li><a href="https://mmhaskell.com/blog/2017/6/21/graphing-it-out">Graphing it out</a></li>
<li><a href="https://functor.tokyo/blog/2017-07-01-highlight">highlight CLI application</a></li>
<li><a href="https://deque.blog/2017/07/01/idris-bowling-kata/">Idris dependent typing challenge: Bowling kata</a></li>
<li><a href="https://www.snoyman.com/blog/2017/07/the-spiderman-principle">The Spiderman principle</a></li>
<li><a href="https://medium.com/@jonathangfischoff/what-should-a-postgresql-migrator-do-47fd34804be">What should a PostgreSQL migrator do?</a></li>
</ul>]]></description>
    <pubDate>Thu, 06 Jul 2017 00:00:00 UT</pubDate>
    <guid>https://haskellweekly.news/issues/62.html</guid>
    <dc:creator>Haskell Weekly</dc:creator>
</item>
<item>
    <title>Issue 61</title>
    <link>https://haskellweekly.news/issues/61.html</link>
    <description><![CDATA[<p>Welcome to another issue of Haskell Weekly! Haskell is a purely functional programming language that focuses on robustness, concision, and correctness. This is a weekly summary of what’s going on in its community.</p>
<h2 id="featured">Featured</h2>
<ul>
<li><p><a href="http://events.techcast.com/bigtechday10/Garmisch-1345/">Haxl: Making concurrency unreasonably easy</a></p>
<blockquote>
<p>Haxl is a big hammer for doing I/O concurrently, testing I/O, and modularity (caching &amp; memoization).</p>
</blockquote></li>
<li><p><a href="https://samtay.github.io/articles/brick.html">Introduction to Brick</a></p>
<blockquote>
<p>I’m going to give a short introduction to Brick, a Haskell library for building terminal user interfaces. So far I’ve used brick to implement Conway’s Game of Life and a Tetris clone. I’ll explain the basics, walk through an example snake application, and then explain some more complicated scenarios.</p>
</blockquote></li>
<li><p><a href="https://pixel-druid.com/blog/announcing-simplexhc/">Simplexhc: An STG to LLVM compiler</a></p>
<blockquote>
<p>STG’s lowering to C– and the decisions taken when implementing it were based in the ’90s. That’s not to say that the GHC team hasn’t done an awesome job keeping it up to date; they have! But, I wonder what a complete rewrite of this lowering would look like. Hence, I’m trying to experiment in this space and see what happens.</p>
</blockquote></li>
<li><p><a href="https://frontrow.workable.com/j/463B843754">Front Row is hiring a senior backend Haskell engineer</a> (ad)</p>
<blockquote>
<p>Come change how 6.5+ million K-12 US students learn Math, Language Arts, Social Studies and more. Use data, advanced type systems, great product design and deep pedagogy to change lives.</p>
</blockquote></li>
<li><p><a href="http://mazzo.li/posts/threads-resources.html">Threading responsibly: <code>forkIO</code> considered harmful</a></p>
<blockquote>
<p>In this post I want to argue that threads are also a resource, in the sense that they require management after we’ve created them. A stray thread will consume memory, CPU cycles, and really whatever resource it might need to execute.</p>
</blockquote></li>
<li><p><a href="https://medium.com/@jonathangfischoff/the-has-type-class-pattern-ca12adab70ae">The <code>Has</code> type class pattern</a></p>
<blockquote>
<p>The value in this approach is that I don’t have to think about what functions to call to collect the images: it’s always <code>images</code>. In the prior example, I had to think about the how to collect the images each time, and it took brain power better spent elsewhere.</p>
</blockquote></li>
<li><p><a href="https://www.fpcomplete.com/blog/2017/06/tale-of-two-brackets">A tale of two brackets</a></p>
<blockquote>
<p>I hope the primary thing you take away from it is a deeper understanding of how monad transformer stacks interact with operations in the base monad, and how monad-control works in general.</p>
</blockquote></li>
<li><p><a href="https://jship.github.io/posts/2017-06-24-record-wildcards-and-binary-parsing.html"><code>RecordWildCards</code> and binary parsing</a></p>
<blockquote>
<p><code>RecordWildCards</code> is a GHC extension that makes working with Haskell records more convenient. The extension has been blogged about in a few places already, so this post intends to provide a different motivating example: binary parsing.</p>
</blockquote></li>
<li><p><a href="http://www.parsonsmatt.org/2017/06/23/on_naming_things.html">On naming things: Library design</a></p>
<blockquote>
<p>I’ve written a few libraries now and have tried out different naming and exporting conventions. I’ve developed a bit of a feel for how it is to write and use them, and I’m going to put out my personal preferences and opinions on library design here.</p>
</blockquote></li>
<li><p><a href="http://www.kovach.me/posts/2017-06-22-mutable-references.html">Haskell Bits #6: A guide to mutable references</a></p>
<blockquote>
<p>There are quite a few ways to store mutable data in Haskell. Let’s talk about some of them! Specifically, we will focus on mutable containers that store a single value that can be modified by one or more threads at any given time. I’m not going to go into a ton of detail here — I just want to give an overview.</p>
</blockquote></li>
<li><p><a href="https://mzabani.wordpress.com/2017/06/22/interfaces-and-typeclasses-number-apis-in-c-and-haskell/">Interfaces and type classes: Number APIs in C# and Haskell</a></p>
<blockquote>
<p>In C# sometimes I sorely miss something like an <code>INumber&lt;T&gt;</code> interface with methods add, subtract, multiply, and others. The lack of this means it is cumbersome to write generic code on numbers.</p>
</blockquote></li>
</ul>
<h2 id="package-of-the-week">Package of the week</h2>
<p>This week’s package of the week is <a href="https://www.stackage.org/lts-8.20/package/data-has-0.2.1.0">data-has</a>, a library that provides a simple extensible product system.</p>
<h2 id="in-brief">In brief</h2>
<ul>
<li><a href="http://hsyl20.fr/home/posts/2017-06-29-announcing-haskussystem-07.html">Announcing haskus-system 0.7</a></li>
<li><a href="https://mmhaskell.com/blog/2017/6/26/fun-with-data-structures">Defeating evil with data structures</a></li>
<li><a href="https://mailman.science.uu.nl/pipermail/nix-dev/2017-June/024011.html">stack2nix first public release</a></li>
<li><a href="https://futhark-lang.org/blog/2017-06-25-futhark-at-pldi.html">Streaming combinators and extracting flat parallelism</a></li>
<li><a href="https://www.tweag.io/posts/2017-05-23-typing-nix.html">Typing Nix</a></li>
<li><a href="https://medium.com/@n0mad/when-competing-with-c-fudge-the-benchmark-16d3a91b437c">When competing with C, fudge the benchmark</a></li>
</ul>
<h2 id="events">Events</h2>
<ul>
<li>July 1: <a href="https://www.meetup.com/Berlin-Functional-Programming-Group/events/241040383/">Berlin Functional Programming Group’s first meeting</a></li>
<li>July 5: <a href="https://www.meetup.com/HASKELL-SG/events/240959693/">Haskell.SG’s July meetup</a></li>
</ul>]]></description>
    <pubDate>Thu, 29 Jun 2017 00:00:00 UT</pubDate>
    <guid>https://haskellweekly.news/issues/61.html</guid>
    <dc:creator>Haskell Weekly</dc:creator>
</item>
<item>
    <title>Issue 60</title>
    <link>https://haskellweekly.news/issues/60.html</link>
    <description><![CDATA[<p>Welcome to another issue of Haskell Weekly! Haskell is a purely functional programming language that focuses on robustness, concision, and correctness. This is a weekly summary of what’s going on in its community.</p>
<h2 id="featured">Featured</h2>
<ul>
<li><p><a href="https://www.fpcomplete.com/blog/2017/06/understanding-resourcet">Understanding <code>ResourceT</code></a></p>
<blockquote>
<p>Instead of just teaching you how to use the library, this post will demonstrate why you need it and how it works internally, to help you avoid some of the potential pitfalls of the library.</p>
</blockquote></li>
<li><p><a href="https://neilmitchell.blogspot.com/2017/06/announcing-weeder-dead-export-detection.html">Announcing Weeder: dead export detection</a></p>
<blockquote>
<p>Most projects accumulate code over time. To combat that, I’ve written Weeder which detects unused Haskell exports, allowing dead code to be removed (pulling up the weeds).</p>
</blockquote></li>
<li><p><a href="http://www.haskellforall.com/2017/06/dhall-is-now-template-engine.html">Dhall is now a template engine</a></p>
<blockquote>
<p>Now you can use Dhall as a template engine with the newly released <code>dhall-text</code> library which provides a <code>dhall-to-text</code> executable for templating text.</p>
</blockquote></li>
<li><p><a href="https://frontrow.workable.com/j/463B843754">Front Row is hiring a senior backend Haskell engineer</a> (ad)</p>
<blockquote>
<p>Come change how 6.5+ million K-12 US students learn Math, Language Arts, Social Studies and more. Use data, advanced type systems, great product design and deep pedagogy to change lives.</p>
</blockquote></li>
<li><p><a href="https://hackernoon.com/testing-postgresql-for-fun-af891047e5fc">Testing PostgreSQL for fun</a></p>
<blockquote>
<p>In this post I’ll show how to make database programming fun by using packages that make testing easy. I’ll walk through a example of building a durable queue backed with PostgreSQL.</p>
</blockquote></li>
<li><p><a href="http://www.parsonsmatt.org/2017/06/21/exceptional_servant_handling.html">Exceptional Servant handling</a></p>
<blockquote>
<p>There are various good reasons why you might want to strip <code>ExceptT</code> from your Servant handlers. There are various good reasons why you wouldn’t want to do that. I’m in the first camp — I don’t want <code>ExceptT</code> over <code>IO</code>.</p>
</blockquote></li>
<li><p><a href="https://two-wrongs.com/on-competing-with-c-using-haskell">On competing with C using Haskell</a></p>
<blockquote>
<p>By writing very straight-forward pure, functional Haskell code without any special trickery, you can get performance equivalent to what you’d get by calling out to a C function, which is also in the same order of magnitude as the same algorithm implemented in a program completely written in C.</p>
</blockquote></li>
<li><p><a href="https://mmhaskell.com/blog/2017/6/19/profiling-in-haskell">How well does it work? Profiling in Haskell</a></p>
<blockquote>
<p>This is where benchmarking and profiling come in. We’re going to take a specific problem and learn how we can use some Haskell tools to zero in on the problem point.</p>
</blockquote></li>
<li><p><a href="http://haroldcarr.com/posts/2017-06-19-the-chain-in-blockchain.html">The chain in blockchain</a></p>
<blockquote>
<p>This post develops a simple blockchain with the goal of understanding the basics of the chain. The most straightforward part of a blockchain is the chain itself, a sequence of blocks.</p>
</blockquote></li>
<li><p><a href="https://github.com/DimaSamoz/mezzo/blob/1d46c5edd5d7d360a027a614c618bb2830d9f93e/README.md">Mezzo: type-safe music composition</a></p>
<blockquote>
<p>Its novelty is in the fact that it can enforce various rules of music composition statically, that is, at compile-time. This effectively means that if you write “bad” music, your composition will not compile — think of it as a very strict spell-checker for music.</p>
</blockquote></li>
<li><p><a href="https://m0ar.github.io/safe-streaming/2017/06/19/linear-types-101.html">Linear types 101 and its relevance to streams</a></p>
<blockquote>
<p>It creates a resource aware type system, which not only knows types of values but also number of uses; a linearly typed value is guaranteed to only have one reference to it at any time, duplication or ignoring will not compile.</p>
</blockquote></li>
</ul>
<h2 id="package-of-the-week">Package of the week</h2>
<p>This week’s package of the week is <a href="https://www.stackage.org/lts-8.19/package/async-2.1.1.1">async</a>, a library that allows you to run IO operations asynchronously and wait for their results.</p>
<h2 id="in-brief">In brief</h2>
<ul>
<li><a href="https://github.com/rampion/kinder-functor/blob/20e5c57867eaae2da56a4d73ac083b8bc2ce7de4/README.md">An alternate definition of Haskell’s <code>Functor</code> type class</a></li>
<li><a href="http://mazzo.li/posts/customizable-data-types.html">Configurable data types</a></li>
<li><a href="https://ro-che.info/articles/2017-06-17-generic-unification">Generic unification</a></li>
<li><a href="https://www.cis.upenn.edu/~jpaykin/papers/pz_linearity_monad_2017.pdf">The linearity monad</a> (pdf)</li>
<li><a href="https://github.com/samtay/tetris/blob/5d9c74cc0c337b5215f01d411d8facb87995c5ae/README.md">A terminal interface for Tetris</a></li>
</ul>]]></description>
    <pubDate>Thu, 22 Jun 2017 00:00:00 UT</pubDate>
    <guid>https://haskellweekly.news/issues/60.html</guid>
    <dc:creator>Haskell Weekly</dc:creator>
</item>
<item>
    <title>Issue 59</title>
    <link>https://haskellweekly.news/issues/59.html</link>
    <description><![CDATA[<p>Welcome to another issue of Haskell Weekly! Haskell is a purely functional programming language that focuses on robustness, concision, and correctness. This is a weekly summary of what’s going on in its community.</p>
<h2 id="featured">Featured</h2>
<ul>
<li><p><a href="http://keera.co.uk/blog/2017/06/01/haskell-android-ios/">Haskell on Android and iOS</a></p>
<blockquote>
<p>With our framework, writing professional Haskell apps and games becomes a reality. In minutes one can have the complete toolchain and see the first app running on a phone or published on the online store. If you weren’t considering using Haskell yet, we hope you soon change your mind.</p>
</blockquote></li>
<li><p><a href="http://www.haskellforall.com/2017/06/translating-c-parser-to-haskell.html">Translating a C++ parser to Haskell</a></p>
<blockquote>
<p>Recently I translated Nix’s derivation parser to Haskell and I thought this would make an instructive example for how C++ idioms map to Haskell idioms. This post targets people who understand Haskell’s basic syntax but perhaps have difficulty translating imperative style to a functional style.</p>
</blockquote></li>
<li><p><a href="https://www.fpcomplete.com/blog/2017/06/readert-design-pattern">The <code>ReaderT</code> design pattern</a></p>
<blockquote>
<p>What many languages address via patterns, in Haskell we address via language features (like built-in immutability, lambdas, laziness, etc.). However, I believe there is still room for some high-level guidance on structuring programs, which I’ll loosely refer to as a Haskell design pattern.</p>
</blockquote></li>
<li><p><a href="https://frontrow.workable.com/j/463B843754">Front Row is hiring a senior backend Haskell engineer</a> (ad)</p>
<blockquote>
<p>Come change how 6.5+ million K-12 US students learn Math, Language Arts, Social Studies and more. Use data, advanced type systems, great product design and deep pedagogy to change lives.</p>
</blockquote></li>
<li><p><a href="https://deque.blog/2017/06/14/10-things-idris-improved-over-haskell/">10 things Idris improved over Haskell</a></p>
<blockquote>
<p>This post describes some of the pleasant surprises you get trying out Idris, coming from the Haskell world. These pleasant surprises have nothing to do with the dependent typing features. They are simple yet impacting modifications, which improve the developer experience substantially.</p>
</blockquote></li>
<li><p><a href="https://markkarpov.com/post/migrating-text-metrics.html">Migrating text metrics to pure Haskell</a></p>
<blockquote>
<p>text-metrics-0.3.0 is written in pure Haskell, almost as fast as the previous versions (especially for not very long inputs), and is more correct (we handle characters represented as two <code>Word16</code> values properly).</p>
</blockquote></li>
<li><p><a href="https://jship.github.io/posts/2017-06-11-zurihac-recap.html">ZuriHac 2017 recap</a></p>
<blockquote>
<p>This was my first time attending ZuriHac and it was too much fun — will definitely be back next year! Big thanks to Jasper Van der Jeugt, Simon Meier, and all of the HSR folks that made the event happen. Props to the Haskell community too for being friendly and inviting.</p>
</blockquote></li>
<li><p><a href="https://github.com/aisamanra/haddock-cheatsheet/blob/c3485d33e6bb42beb41c9768f6f8050eed4aaabc/haddocks.md#readme">Haddock markup quick reference</a></p>
<blockquote>
<p>This page is a single-page quick reference for the markup used in GHC’s Haddock documentation format. It doesn’t list all the details of the format, just the basic markup, so for the vagaries and edge-cases of the syntax, it would be helpful to consult the Haddock user guide.</p>
</blockquote></li>
<li><p><a href="https://jaredweakly.com/blog/haskell-summer-of-code/">Haskell Summer of Code</a></p>
<blockquote>
<p>The performance tests do two things: first, they make sure that when people change the compiler, they don’t accidentally make it slower; secondly, they make sure that when people change the compiler, they don’t accidentally make the generated code less efficient.</p>
</blockquote></li>
<li><p><a href="https://e.xtendo.org/haskell/hpack">Use hpack</a></p>
<blockquote>
<p>One of the remaining problems is that the <code>package.cabal</code> file is in a custom format. Custom formats are generally not good because you can’t leverage the existing tools and free-ride other people’s work.</p>
</blockquote></li>
<li><p><a href="https://www.youtube.com/watch?v=lC5UWG5N8oY">Haskell taketh away: Limiting side effects for parallel programming</a></p>
<blockquote>
<p>In designing parallel programming abstractions, taking away user capabilities is as important as granting them. In this talk, I’ll explain the role of this idea in several different parallel programming libraries for Haskell, C++, and other languages — spanning from shared memory to big data.</p>
</blockquote></li>
</ul>
<h2 id="package-of-the-week">Package of the week</h2>
<p>This week’s package of the week is <a href="https://hackage.haskell.org/package/generic-lens-0.2.0.0">generic-lens</a>, a library that exposes generic data structure operations as lenses.</p>
<h2 id="in-brief">In brief</h2>
<ul>
<li><a href="https://www.well-typed.com/blog/2017/06/rtti/">Binary instances for GADTs (or: RTTI in Haskell)</a></li>
<li><a href="http://degoes.net/articles/kill-data">Data structures are antithetical to functional programming</a></li>
<li><a href="http://ndmitchell.com/downloads/slides-drive-by_haskell_contributions-09_jun_2017.pdf">Drive-by Haskell contributions</a></li>
<li><a href="https://ro-che.info/articles/2017-06-12-friendly-contributing-policies">On friendly contributing policies</a></li>
<li><a href="https://mmhaskell.com/blog/2017/6/12/taking-a-close-look-at-lenses">Taking a close look at lenses</a></li>
<li><a href="https://docs.google.com/presentation/d/1_I5mYXivG5NbOHnICld_Xo41uOyAT57Yade5qfz2toQ/edit#slide=id.p">Teaching Haskell for understanding</a></li>
<li><a href="http://www.haskellcast.com/episode/014-richard-eisenberg-on-dependent-types-in-haskell">The Haskell Cast episode 14: Richard Eisenberg on dependent types</a></li>
</ul>]]></description>
    <pubDate>Thu, 15 Jun 2017 00:00:00 UT</pubDate>
    <guid>https://haskellweekly.news/issues/59.html</guid>
    <dc:creator>Haskell Weekly</dc:creator>
</item>
<item>
    <title>Issue 58</title>
    <link>https://haskellweekly.news/issues/58.html</link>
    <description><![CDATA[<p>Welcome to another issue of Haskell Weekly! <a href="https://haskell-lang.org">Haskell</a> is a purely functional programming language that focuses on robustness, concision, and correctness. This is a weekly summary of what’s going on in its community.</p>
<ul>
<li><p><a href="https://medium.com/@zw3rk/a-haskell-cross-compiler-for-ios-7cc009abe208">A Haskell cross compiler for iOS</a></p>
<blockquote>
<p>So far we have built a Haskell cross compiler for Raspberry Pi, as well as a Haskell cross compiler for Android. To round this off, we will build a cross compiler for iOS as well. With the WWDC signaling the end of 32-bit devices, we will only build the 64-bit cross compiler.</p>
</blockquote></li>
<li><p><a href="http://blog.akii.de/posts/2017-06-04-eventsourcing-in-haskell.html">Event sourced aggregates in Haskell</a></p>
<blockquote>
<p>In this first post I’ll be digging into event sourced aggregates in Haskell. It basically means that instead of persisting some state like “Johns account balance is $100”, you keep track of the changes to John’s account: “First he deposited $125, then withdrew $25”.</p>
</blockquote></li>
<li><p><a href="http://teh.id.au/posts/2017/06/07/round-trip-property/index.html">The round-trip property</a></p>
<blockquote>
<p>We know that parsers and printers are supposed to be dual. We can simply treat this as a law, and write a property test to enforce it. This is both the simplest useful property test I can think of for a working engineer and the most likely to reliably identify bugs of consequence.</p>
</blockquote></li>
<li><p><a href="http://vmob.me/DE3Q17Haskellweek">How well do you know your programming tools? Take the survey and test your skills!</a> (ad)</p>
<blockquote>
<p>“It is a good survey which, in addition to remembering what I already knew, gave me new tools to learn about and work with.” This is how developers feel about the Developer Economics survey. The survey also shows you how you compare to other developers in your country. Plus you may win an iPhone 7 or a Pixel 32GB phone.</p>
</blockquote></li>
<li><p><a href="https://hackernoon.com/assume-it-worked-and-fix-later-8436d18b7ed3">Assume it worked and fix it later</a></p>
<blockquote>
<p>If your email service is down, it can be beneficial to have the signup succeed regardless. By decoupling the success of an email request from the success of account signup, you can improve the reliability of your application.</p>
</blockquote></li>
<li><p><a href="https://mmhaskell.com/blog/2017/6/5/flexible-data-with-aeson">Flexible data with Aeson</a></p>
<blockquote>
<p>At a certain point, our Haskell programs have to be compatible with other programs running on the web. This is especially useful given the growing usage of micro-services as an architecture. Regardless, it’s very common to be transferring data between applications on different stacks.</p>
</blockquote></li>
<li><p><a href="https://wickstrom.tech/programming/2017/06/05/tagless-final-encoding-of-a-test-language.html">Tagless final encoding of a test language</a></p>
<blockquote>
<p>I have experimented with a test language encoded in tagless final style, instead of algebraic data types, to support the typed combinators <code>beforeEach</code> and <code>beforeAll</code>. I want to share the Haskell prototype I ended up with, and explain how I got there.</p>
</blockquote></li>
<li><p><a href="http://www.gigamonkeys.com/trees/">Can’t see the four-est for the trees</a></p>
<blockquote>
<p>It’s a fun puzzle so you may want to take a crack at it yourself before reading on. But this isn’t really about that puzzle. This is about how sometimes when the mathematical insights aren’t flowing it’s good to be a programmer.</p>
</blockquote></li>
<li><p><a href="https://byorgey.wordpress.com/2017/06/07/the-typeclassopedia-is-now-up-to-date/">The Typeclassopedia is now up to date</a></p>
<blockquote>
<p>The title pretty much says it all: I have finally finished (I hope) updating the Typeclassopedia to reflect various recent changes to the language and standard libraries (such as the AMP and BBP/FTP). Along the way I also added more links to related reading as well as more exercises.</p>
</blockquote></li>
<li><p><a href="http://blog.ielliott.io/continuations-from-the-ground-up/">Continuations from the ground up</a></p>
<blockquote>
<p>It’s difficult to learn functional programming without hearing about continuations. Often they’re mentioned while talking about boosting the performance of pure functional code, sometimes there’s talk of control flow, and occasionally with “time-travel” thrown in there to make it all seem more obscure.</p>
</blockquote></li>
<li><p><a href="https://www.snoyman.com/blog/2017/06/how-to-send-me-a-pull-request">How to send me a pull request</a></p>
<blockquote>
<p>I find myself repeating a lot of the same comments in pull requests, so I decided to put together a list of what I consider the most important features of a good pull request. Other people will have different feelings on some of these, but the points below are what apply to my projects.</p>
</blockquote></li>
</ul>
<h2 id="package-of-the-week">Package of the week</h2>
<p>This week’s package of the week is <a href="https://www.stackage.org/package/yesod">Yesod</a>, a web framework for productive development of type-safe, RESTful, high performance web applications.</p>]]></description>
    <pubDate>Thu, 08 Jun 2017 00:00:00 UT</pubDate>
    <guid>https://haskellweekly.news/issues/58.html</guid>
    <dc:creator>Haskell Weekly</dc:creator>
</item>
<item>
    <title>Issue 57</title>
    <link>https://haskellweekly.news/issues/57.html</link>
    <description><![CDATA[<p>Welcome to another issue of Haskell Weekly! <a href="https://haskell-lang.org">Haskell</a> is a purely functional programming language that focuses on robustness, concision, and correctness. This is a weekly summary of what’s going on in its community.</p>
<ul>
<li><p><a href="https://lexi-lambda.github.io/blog/2017/05/27/realizing-hackett-a-metaprogrammable-haskell/">Realizing Hackett, a metaprogrammable Haskell</a></p>
<blockquote>
<p>Almost five months ago, I wrote a blog post about my new programming language, Hackett, a fanciful sketch of a programming language from a far-off land with Haskell’s type system and Racket’s macros. […] Hackett is not only real, it’s working, and you can try it out yourself!</p>
</blockquote></li>
<li><p><a href="http://vaibhavsagar.com/blog/2017/05/29/imperative-haskell/">Imperative Haskell</a></p>
<blockquote>
<p>Why don’t we do this all the time, when Haskell is at least a serviceable imperative language? Because writing imperative programs is hard! They don’t compose as well, have less useful type signatures, and are harder to reason about. Getting away from those things is why we have Haskell to begin with!</p>
</blockquote></li>
<li><p><a href="https://medium.com/@zw3rk/a-haskell-cross-compiler-for-android-8e297cb74e8a">A Haskell cross compiler for Android</a></p>
<blockquote>
<p>Finally launching and running the application on the device, we are greeted with “Hello from Haskell”. While the utility of this application is certainly questionable it illustrates the essential steps required to build, link and run an Android application calling a native Haskell function.</p>
</blockquote></li>
<li><p><a href="https://mmhaskell.com/blog/2017/5/29/smart-data-with-conduits">Smart data with conduits</a></p>
<blockquote>
<p>If you’re a programmer now, there’s one reality you’d best be getting used to. People expect you to know how to deal with big data. The kind of data that will take a while to process. The kind that will crash your program if you try to bring it all into memory at the same time.</p>
</blockquote></li>
<li><p><a href="https://wire.softgarden.io/job/1022464?l=en">Wire is hiring a Software Backend Developer (Operations) in Berlin, Germany</a> (ad)</p>
<blockquote>
<p>Wire is an open source, end-to-end encrypted messenger for personal and business use. For our development center in Berlin we are hiring two Backend Haskell Developers. As Software Developer Backend Operations you will maintain our infrastructure, ensuring that it runs 24/7. Check out our jobs at <a href="https://wire.com/en/jobs/">wire.com/jobs</a> and our open source code on <a href="https://github.com/wireapp">github.com/wireapp</a>.</p>
</blockquote></li>
<li><p><a href="https://joyofhaskell.com/posts/2017-05-31-is-vs-has.html">What we talk about when we talk about types</a></p>
<blockquote>
<p>These dialogues somewhat pedantically dissect what we mean when we say <em>a type is an instance of a type class</em> or <em>a type has an instance of a type class</em> and why. Through the course of conversation, we touch on the nature of types, type constructors, and type classes, which led to us talking about math, set theory and category theory, and what they have to do with types and type classes.</p>
</blockquote></li>
<li><p><a href="https://medium.com/@jonathangfischoff/the-partial-options-monoid-pattern-31914a71fc67">The partial options monoid</a></p>
<blockquote>
<p>Parsing options is not the hardest problem. However, if you do not create a pattern the rest of your team can follow, your program can become a tangled mess of random file reads, environment variable lookups and unpredictable defaulting. The <code>Monoid</code> class is a rock solid abstraction for combining options.</p>
</blockquote></li>
<li><p><a href="https://www.snoyman.com/blog/2017/05/playing-with-lens-aeson">Playing with lens-aeson</a></p>
<blockquote>
<p>That works, but it’s far from inspiring. We’re declaring a <code>Color</code> data type simply for the purpose of writing a type class instance. But it feels pretty heavyweight to have to declare a data type and make a type class instance for just one use site.</p>
</blockquote></li>
</ul>
<h2 id="packages-of-the-week">Packages of the week</h2>
<p>Several interesting packages were announced this week. Instead of picking one to feature, all four are this week’s packages of the week!</p>
<ul>
<li><a href="https://github.com/lotz84/double-pendulum-simulation">double-pendulum-simulation</a> simulates and renders a double pendulum system.</li>
<li><a href="https://github.com/aviaviavi/legion">legion</a> implements a simple block chain server that synchronizes nodes over the network.</li>
<li><a href="https://github.com/quchen/prettyprinter">prettyprinter</a> aims to end the Wadler/Leijen zoo dilemma by being a modern, well-documented pretty printer.</li>
<li><a href="https://github.com/ChrisPenner/SitePipe">sitepipe</a> generates static sites with plain values and less magic.</li>
</ul>]]></description>
    <pubDate>Thu, 01 Jun 2017 00:00:00 UT</pubDate>
    <guid>https://haskellweekly.news/issues/57.html</guid>
    <dc:creator>Haskell Weekly</dc:creator>
</item>
<item>
    <title>Issue 56</title>
    <link>https://haskellweekly.news/issues/56.html</link>
    <description><![CDATA[<p>Welcome to another issue of Haskell Weekly! <a href="https://haskell-lang.org">Haskell</a> is a purely functional programming language that focuses on robustness, concision, and correctness. This is a weekly summary of what’s going on in its community.</p>
<ul>
<li><p><a href="https://summer.haskell.org/news/2017-05-24-accepted-projects.html">Accepted projects for 2017</a></p>
<blockquote>
<p>We are happy to announce the 15 projects accepted for Summer of Haskell 2017 and that the community bonding period has begun.</p>
</blockquote></li>
<li><p><a href="https://philipnilsson.github.io/Badness10k/posts/2017-05-07-escaping-hell-with-monads.html">Escaping hell with monads</a></p>
<blockquote>
<p>As programmers we occasionally find ourselves in “Programmer’s Hell”, where our regular abstractions fail to satisfactory solve certain recurrent problems. In this post we’ll have a look at some instances of such situations, their “ad hoc” solutions provided at the language level, and finally at how these problems can be solved in a uniform way using monads.</p>
</blockquote></li>
<li><p><a href="https://medium.com/@zw3rk/cross-compiling-template-haskell-7e38c00c2914">Cross compiling Template Haskell</a></p>
<blockquote>
<p>As laid out yesterday, there are some interesting questions pertaining to Template Haskell and cross compilation. Today we will put all the pieces together and cross compile Template Haskell to our Raspberry Pi with file and process IO!</p>
</blockquote></li>
<li><p><a href="https://hackernoon.com/type-class-patterns-and-anti-patterns-efd045c5af66">Type class patterns and anti-patterns</a></p>
<blockquote>
<p>In a prior post I wrote about how type class instance selection worked. To help get a sense of good type class design, I want to walk through a type class pattern and a related type class anti-pattern.</p>
</blockquote></li>
<li><p><a href="https://mmhaskell.com/blog/2017/5/22/numbers-of-every-shape-and-size">Numbers of every shape and size</a></p>
<blockquote>
<p>Last week we explored the many different string types in Haskell. But this isn’t the only situation where we seem to have an abundance of similar types. We can also see this in Haskell’s numeric types. Again, we have the issue that we often want to represent numbers in slightly different ways.</p>
</blockquote></li>
<li><p><a href="http://vaibhavsagar.com/blog/2017/05/22/discovering-continuations/">Discovering continuations with typed holes</a></p>
<blockquote>
<p>If you haven’t encountered them before, typed holes are a feature where you put one or more variables starting with <code>_</code> on the right hand side of a definition to get GHC to tell you the type of the value that fits in that hole, and you can narrow the hole as necessary to get the type of a subexpression until you have enough information to complete the definition.</p>
</blockquote></li>
<li><p><a href="https://functor.tokyo/blog/2017-05-10-servant-checked-exceptions">Servant checked exceptions</a></p>
<blockquote>
<p>I have been using Servant for about two years now. I really like it. It’s easy to use and type-safe. If I need to write a JSON API in Haskell, Servant is almost always my first choice. However, one thing I have always wanted is an easy way to handle errors in my server handlers.</p>
</blockquote></li>
<li><p><a href="https://brianmckenna.org/blog/eta_android">Haskell on Android using Eta</a></p>
<blockquote>
<p>Eta is a fork of GHC which provides Haskell with a JVM backend. I’ve been working on it recently and did a presentation on it at LambdaJam. One of the questions from my presentation was “since Eta takes Haskell and produces JVM code, can I use it to write Android apps?” I had a feeling Eta was close to being able to. It turns out it’s not just close, it’s pretty easy!</p>
</blockquote></li>
<li><p><a href="https://np.reddit.com/r/haskell/comments/6cbgq3/what_are_the_important_haskell_libs_that_are_no/">What are the important Haskell libraries that are no longer maintained?</a></p>
<blockquote>
<p>Of course open source work is all volunteer and I’m grateful for whatever the authors choose to do, but we may want to consider which packages are languishing and need new maintainers to help.</p>
</blockquote></li>
</ul>
<h2 id="package-of-the-week">Package of the week</h2>
<p>This week’s package of the week is <a href="https://www.stackage.org/lts-8.15/package/amazonka-1.4.5">Amazonka</a>, a comprehensive Amazon Web Services (AWS) SDK.</p>]]></description>
    <pubDate>Thu, 25 May 2017 00:00:00 UT</pubDate>
    <guid>https://haskellweekly.news/issues/56.html</guid>
    <dc:creator>Haskell Weekly</dc:creator>
</item>
<item>
    <title>Issue 55</title>
    <link>https://haskellweekly.news/issues/55.html</link>
    <description><![CDATA[<p>Welcome to another issue of Haskell Weekly! <a href="https://haskell-lang.org">Haskell</a> is a purely functional programming language that focuses on robustness, concision, and correctness. This is a weekly summary of what’s going on in its community.</p>
<ul>
<li><p><a href="https://mail.haskell.org/pipermail/ghc-devs/2017-May/014197.html">GHC 8.2.1 release candidate 2</a></p>
<blockquote>
<p>The GHC team is very pleased to announce the second candidate of the 8.2.1 release of the Glasgow Haskell Compiler. Source and binary distributions are available. This is the second of what will likely be either two or three release candidates leading up the final 8.2.1 release.</p>
</blockquote></li>
<li><p><a href="http://taylor.fausak.me/2017/05/17/testing-ghc-release-candidates-with-stack/">Testing GHC release candidates with Stack</a></p>
<blockquote>
<p>Using the new compiler or interpreter directly is easy enough, but what about building an entire project? How can a Haskell developer test their code with the latest release candidate? I’m going to show you how to use Stack to do just that.</p>
</blockquote></li>
<li><p><a href="https://medium.com/@zw3rk/the-haskell-cabal-and-cross-compilation-e9885fd5e2f">The Haskell Cabal and cross compilation</a></p>
<blockquote>
<p>Over the last few days we set up the Raspberry Pi, built the Raspbian SDK and the Haskell cross compiler. Today we will look at what Cabal is, and how to use it for cross compilation.</p>
</blockquote>
<p>zw3rk also published their <a href="https://medium.com/@zw3rk/cross-compilation-survey-results-3988ad1b677b">cross compilation survey results</a> recently.</p></li>
<li><p><a href="https://mpickering.github.io/posts/2017-05-17-inlining-case-study.html">INLIN(E)ing: A case study</a></p>
<blockquote>
<p>It turned out that a misplaced INLINE pragma was causing a lot of simplification work to be duplicated. Removing the pragma allowed the compiler to operate faster whilst producing the same code.</p>
</blockquote></li>
<li><p><a href="http://www.kovach.me/posts/2017-05-11-easy-json.html">Haskell Bits #5: Easily working with JSON</a></p>
<blockquote>
<p>JSON is ubiquitous nowadays, perhaps most importantly for web APIs. We’ll probably need to interact with (or build) one of those at some point, so we must be able to handle JSON in Haskell, right? Yep — also it’s pretty easy. Let’s talk about it!</p>
</blockquote></li>
<li><p><a href="https://hackernoon.com/typeclass-instance-selection-fea1068920e6">On type class instance selection</a></p>
<blockquote>
<p>Many Haskellers have bad memories of failed attempts to use type classes successfully. My hope is by demystifying how type class instance selection works, we can avoid undue anguish.</p>
</blockquote></li>
<li><p><a href="https://medium.com/@sjsyrek/five-minutes-to-monoid-fe6f364d0bba">Five minutes to monoid</a></p>
<blockquote>
<p>But do spread the word about monoids. They are, quite literally, everywhere — whether you take advantage of their useful properties or not. Obviously, you should.</p>
</blockquote></li>
<li><p><a href="https://mmhaskell.com/blog/2017/5/15/untangling-haskells-strings">Untangling Haskell’s strings</a></p>
<blockquote>
<p>There are, in total, five different types representing strings in Haskell. In this article we’ll go over these five different types. We’ll examine their different use cases, and observe how to convert between them.</p>
</blockquote></li>
</ul>
<h2 id="package-of-the-week">Package of the week</h2>
<p>This week’s package of the week is <a href="https://www.stackage.org/lts-8.14/package/wreq-0.5.0.1">wreq</a>, an HTTP client library that’s easy to use.</p>]]></description>
    <pubDate>Thu, 18 May 2017 00:00:00 UT</pubDate>
    <guid>https://haskellweekly.news/issues/55.html</guid>
    <dc:creator>Haskell Weekly</dc:creator>
</item>

    </channel>
</rss>
